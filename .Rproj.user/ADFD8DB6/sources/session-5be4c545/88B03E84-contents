# Tutorial bem completo para usar de referência:
# https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/

# Banco de dados traduzido de:
# https://github.com/rfordatascience/tidytuesday/blob/master/data/2018/2018-10-23/movie_profit.csv


# Carregamento dos pacotes
if(!require(pacman)){install.packages("pacman")}
pacman::p_load(ggplot2, dplyr, scales, ggpubr)


# Seleção do diretório de trabalho (working directory)
# Isso pode ser feito manualmente: Session > Set Working Directory > Choose Directory

# Carregamento do banco de dados
dados <- read.csv2("LucroFilmes.csv", stringsAsFactors = T)
glimpse(dados)

## Modificando DataLancamento para o formato data
dados$DataLancamento <- as.Date(dados$DataLancamento, format = "%m/%d/%Y")

### Salvando o mês e o ano em colunas separadas
dados <- dados %>% mutate(AnoLancamento = format(DataLancamento, "%Y"))
dados <- dados %>% mutate(MesLancamento = format(DataLancamento, "%m"))



gm <- dados %>% filter(Classificacao %in% c("PG", "PG-13", "R")) %>%
  ggplot(aes(x = Genero, y = LucroLocal, color = Classificacao)) +
  geom_point(stat = "summary", fun = "mean", position = position_dodge(.4)) +
  geom_errorbar(stat = "summary", fun.data = "mean_ci", width = 0.3,
                position = position_dodge(.4)) +
  labs(y = "Lucro Local (US$)", x = "Gênero", color = "Classificação")


gm


## Modificando os limites dos eixos
### coord_cartesian x scale_y_continuous

gm + coord_cartesian(ylim = c(0, 100000000))

gm + scale_y_continuous(limits = c(0, 100000000))



## Modificando a expansão

gb <- ggplot(data = dados) +
  geom_bar(aes(x = Genero, y = ..count.., fill = Genero), show.legend = F) +
  labs(y = "Quantidade de filmes", x = "Gênero")


gb + scale_y_continuous(expand = expansion(add = c(0,100)))

gb + scale_y_continuous(expand = expansion(mult = c(0,0.05)))



## Modificando a quantidade de dígitos e os separadores (milhar e decimal)


gb + scale_y_continuous(expand = expansion(add = c(0,100)),
                        labels = scales::number_format(accuracy = 0.1,
                                                       decimal.mark = ",",
                                                       big.mark = "."))



## Usando porcentagens nos eixos

gbp <- ggplot(data = dados) +
  geom_bar(aes(x = Genero, y = (..count..)/sum(..count..),
               fill = Genero), show.legend = F) +
  labs(y = "Quantidade de filmes", x = "Gênero")


gbp <- gbp + scale_y_continuous(expand = expansion(mult = c(0,0.05)),
                         labels = scales::percent_format(accuracy = 0.1,
                                                         decimal.mark = ","))



## Modificando os rótulos do eixo x (categórico)

gbp + scale_x_discrete(labels = c("Ação", "Aventura", "Comédia",
                                  "Drama", "Terror"))



## Modificando as ordens das categorias do eixo x (categórico)

gbp + scale_x_discrete(limits = c("Drama", "Comedia", "Acao",
                                  "Aventura", "Terror"),
                       labels = c("Drama", "Comédia", "Ação",
                                  "Aventura", "Terror"))


## Outra opção: usando o pacote forcats
pacman::p_load(forcats)

ggplot(data = dados) +
  geom_bar(aes(x = fct_infreq(Genero), y = (..count..)/sum(..count..),
               fill = Genero), show.legend = F) +
  labs(y = "Quantidade de filmes", x = "Gênero") +
  scale_y_continuous(expand = expansion(mult = c(0,0.05)),
                     labels = scales::percent_format(accuracy = 0.1,
                                                     decimal.mark = ","))


## Modificando o intervalo entre os valores do eixo (variável numérica)

gl <- ggplot(data = dados) +
  geom_line(aes(x = as.numeric(AnoLancamento), group = 1), stat = "count") +
  labs(y = "Quantidade de filmes", x = "Ano de lançamento")


gl + scale_x_continuous(n.breaks = 10)


gl + scale_x_continuous(breaks = seq(1935, 2020, by = 5))


gl + scale_x_continuous(breaks = seq(min(dados$AnoLancamento),
                                     max(dados$AnoLancamento),
                                     by = 5))


## Formatando a unidade para moeda

gs <- ggplot(data = dados, aes(x = LucroLocal, y = LucroMundial)) +
  geom_point(color = "#61988E", shape = 16, size = 1) +
  geom_smooth(method = "lm", se = F, color = "black", size = 0.5) +
  labs(y = "Lucro Mundial (US$)", x = "Lucro Local (US$)")


gs + scale_y_continuous(labels = scales::number_format(big.mark = ".",
                                                       decimal.mark = ",")) +
  scale_x_continuous(labels = scales::number_format(big.mark = ".",
                                                    decimal.mark = ","))


gs + scale_y_continuous(labels = scales::number_format(big.mark = ".",
                                                       decimal.mark = ",",
                                                       prefix = "US$ ")) +
  scale_x_continuous(labels = scales::number_format(big.mark = ".",
                                                    decimal.mark = ",",
                                                    prefix = "US$ "))


gs + scale_y_continuous(labels = scales::dollar_format()) +
  scale_x_continuous(labels = scales::dollar_format())




## Formatando a unidade para "em milhões"


gs + scale_y_continuous(labels = scales::number_format(big.mark = ".",
                                                       decimal.mark = ",",
                                                       prefix = "US$ ",
                                                       scale = 1e-6,
                                                       suffix = " M")) +
  scale_x_continuous(labels = scales::number_format(big.mark = ".",
                                                    decimal.mark = ",",
                                                    prefix = "US$ ",
                                                    scale = 1e-6,
                                                    suffix = " M"))



gs <- gs + scale_y_continuous(labels = scales::number_format(big.mark = ".",
                                                       decimal.mark = ",",
                                                       prefix = "US$ ",
                                                       scale = 1e-6)) +
  scale_x_continuous(labels = scales::number_format(big.mark = ".",
                                                    decimal.mark = ",",
                                                    prefix = "US$ ",
                                                    scale = 1e-6)) +
  labs(y = "Lucro mundial em milhões", x = "Lucro local em milhões")




## Facet wrap x facet grid


### Wrap
gs + facet_wrap(~ Genero)


### Modificando a quantidade de colunas ou linhas
gs + facet_wrap(~ Genero, ncol = 2)


### Escala fixa ou livre (fixed, free, free_y, free_x)
gs + facet_wrap(~ Genero, ncol = 2, scales = "free")


### Grid
gs + facet_grid(Classificacao ~ Genero)


### Escala fixa ou livre (fixed, free, free_y, free_x)
gs + facet_grid(Classificacao ~ Genero, scales = "free")

